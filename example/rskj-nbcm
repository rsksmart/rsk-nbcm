#!/usr/bin/env sh

NBCM_LIBS="${HOME}/prj/rsk-nbcm/build/libs"

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.." >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="rskj-core"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and RSKJ_CORE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-server" "-Xss32m" "-Xms3G" "-XX:+UseCompressedOops" "-XX:-OmitStackTraceInFastThrow"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=${HOME}/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.27.0-GA/f63e6aa899e15eca8fdaa402a79af4c417252213/javassist-3.27.0-GA.jar:$APP_HOME/lib/rskj-core-2.2.0-PAPYRUS.jar:$APP_HOME/lib/bitcoinj-thin-0.14.4-rsk-9.jar:$APP_HOME/lib/core-1.52.0.0.jar:$APP_HOME/lib/netty-codec-http-4.0.56.Final.jar:$APP_HOME/lib/bclcrypto-jdk15on-1.59.jar:$APP_HOME/lib/leveldb-0.9.jar:$APP_HOME/lib/leveldbjni-1.8.jar:$APP_HOME/lib/leveldbjni-all-1.18.3.jar:$APP_HOME/lib/jsonrpc4j-1.5.1.jar:$APP_HOME/lib/log4j-over-slf4j-1.7.25.jar:$APP_HOME/lib/logback-classic-1.2.2.jar:$APP_HOME/lib/slf4j-api-1.7.25.jar:$APP_HOME/lib/jackson-databind-2.8.7.jar:$APP_HOME/lib/commons-lang3-3.5.jar:$APP_HOME/lib/config-1.3.3.jar:$APP_HOME/lib/mapdb-2.0-beta13.jar:$APP_HOME/lib/jaxws-rt-2.3.3.jar:$APP_HOME/lib/native-1.2.0.jar:$APP_HOME/lib/logback-core-1.2.2.jar:$APP_HOME/lib/netty-handler-4.0.56.Final.jar:$APP_HOME/lib/netty-codec-4.0.56.Final.jar:$APP_HOME/lib/leveldb-api-0.9.jar:$APP_HOME/lib/guava-18.0.jar:$APP_HOME/lib/hawtjni-runtime-1.9.jar:$APP_HOME/lib/jackson-annotations-2.8.5.jar:$APP_HOME/lib/jackson-core-2.8.7.jar:$APP_HOME/lib/protobuf-java-2.6.1.jar:$APP_HOME/lib/jsr305-2.0.1.jar:$APP_HOME/lib/jcip-annotations-1.0.jar:$APP_HOME/lib/scrypt-1.4.0.jar:$APP_HOME/lib/okhttp-2.7.2.jar:$APP_HOME/lib/base64-2.3.9.jar:$APP_HOME/lib/policy-2.7.10.jar:$APP_HOME/lib/jaxb-impl-2.3.3.jar:$APP_HOME/lib/ha-api-3.1.12.jar:$APP_HOME/lib/management-api-3.2.2.jar:$APP_HOME/lib/gmbal-4.0.1.jar:$APP_HOME/lib/pfl-tf-4.1.0.jar:$APP_HOME/lib/pfl-basic-4.1.0.jar:$APP_HOME/lib/streambuffer-1.5.9.jar:$APP_HOME/lib/saaj-impl-1.5.2.jar:$APP_HOME/lib/stax-ex-1.8.3.jar:$APP_HOME/lib/mimepull-1.9.13.jar:$APP_HOME/lib/FastInfoset-1.2.18.jar:$APP_HOME/lib/jakarta.activation-1.2.2.jar:$APP_HOME/lib/woodstox-core-5.1.0.jar:$APP_HOME/lib/stax2-api-4.1.jar:$APP_HOME/lib/jakarta.xml.ws-api-2.3.3.jar:$APP_HOME/lib/jakarta.xml.bind-api-2.3.3.jar:$APP_HOME/lib/jakarta.xml.soap-api-1.4.2.jar:$APP_HOME/lib/jakarta.jws-api-2.1.0.jar:$APP_HOME/lib/jakarta.annotation-api-1.3.5.jar:$APP_HOME/lib/netty-transport-4.0.56.Final.jar:$APP_HOME/lib/netty-buffer-4.0.56.Final.jar:$APP_HOME/lib/okio-1.6.0.jar:$APP_HOME/lib/jakarta.activation-api-1.2.2.jar:$APP_HOME/lib/netty-common-4.0.56.Final.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $RSKJ_CORE_OPTS -classpath "\"$CLASSPATH\"" co.rsk.Start "$APP_ARGS"

exec "$JAVACMD" -javaagent:$NBCM_LIBS/rsk-nbcm-0.1.0.jar "$@"
